#
# $Id: names.tcl,v 1.4 2002/04/04 23:08:56 patthoyts Exp $
#
package require Mod
namespace eval names {
   
    namespace export names procs vars prototype value exports
    
    proc unqualify s {
        regsub -all "(^| ):+" $s {\1} result
        return $result
    }
    
    proc names {_ {name ::}} {
        set result $name
        foreach n [::inspector::SendAnTarget $_ namespace children $name] {
            append result " " [names $_ $n]
        }
        return $result
    }
    
    proc procs {_ {names ""}} {
        if {$names == ""} {
            set names [names $_]
        }
        set result {}
        foreach n $names {
            foreach p [::inspector::SendAnTarget $_ namespace eval $n ::info procs] {
                lappend result "$n\::$p"
            }
        }
        return [unqualify $result]
    }
    
    # pinched from globals_list.tcl
    proc prototype {_ proc} {
        set result {}
        set args [::inspector::SendAnTarget $_  ::info args $proc]
        set defaultvar "__tkinspect:default_arg__"
        foreach arg $args {
            if {[::inspector::SendAnTarget $_  ::info default $proc $arg $defaultvar]} {
                lappend result [list $arg [::inspector::SendAnTarget $_  set $defaultvar]]
            } else {
                lappend result $arg
            }
        }
        
        ::inspector::SendAnTarget $_ catch unset $defaultvar
        
        return [list proc [namespace tail $proc] $result {} ]
    }
    
    proc vars {_ {names ""}} {
        if {$names == ""} {
            set names [$_ names ]
        }
        set result {}
        foreach n $names {
            foreach v [::inspector::SendAnTarget $_ ::info vars ${n}::*] {
                lappend result $v
            }
        }
        return [unqualify $result]
    }

    proc value {_ var} {
        set tail [namespace tail $var]
        if {[::inspector::SendAnTarget $_ array exists $var]=={1}} {
            return "variable $tail ; # is an array\n" ; # dump it out?
        }
        set cmd [list set $var]
        set retcode [catch [list ::inspector::SendAnTarget $_ set $var] msg]
        if {$retcode != 0} {
            return "variable $tail ; # $var not defined\n"
        } else {
            return "variable $tail \"$msg\"\n"
        }
    }
    
    proc exports { _ namespace} {
        set result [::inspector::SendAnTarget $_ namespace eval $namespace ::namespace export]
        return [unqualify $result]
    }

    # dump [tk appname]
    proc dump appname {
        puts "names: [names $_ $appname]"
        puts ""
        puts "procs: [procs $_ $appname]"
        puts ""
        puts "vars: [vars $_  $appname]"
        puts ""
        puts "exports: [exports $_ $appname]"
    }
}
